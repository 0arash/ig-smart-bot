// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatMessageType {
  TEXT
}

enum Action {
  AdminRequired
  ProductRequest
}

enum Role {
  CHAT_OPERATOR
  USER
  ADMIN
}

enum InvoiceStatus {
  VERIFIED
  CANCELLED
  PENDING
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  name            String?
  token           String?
  mobile          String?
  address         String?
  code_meli       String?
  role            Role             @default(USER)
  user_plans      UserPlan[]
  Invoice         Invoice[]
  PlanDiscount    PlanDiscount[]
  // Operator fields

  operator_user_plan    UserPlan?     @relation(name: "OperatorUserPlan", fields: [operator_user_plan_id], references: [id])
  operator_user_plan_id Int?
  chatMessages          ChatMessage[]
}

model Plan {
  id         Int        @id @default(autoincrement())
  title      String
  price      Int
  days       Int
  user_plans UserPlan[]
  invoices   Invoice[]
}

model PlanDiscount {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  discount  Int
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  userPlans UserPlan[]
}

model UserPlan {
  id               Int              @id @default(autoincrement())
  plan             Plan             @relation(fields: [plan_id], references: [id])
  user             User             @relation(fields: [user_id], references: [id])
  plan_id          Int              @map("planId")
  user_id          Int              @map("userId")
  chat_users       ChatUser[]
  created_at       DateTime         @default(now())
  products         Product[]
  categories       Category[]
  api_key          String?          @unique
  business_title   String?
  business_caption String?
  PlanDiscount     PlanDiscount?    @relation(fields: [planDiscountId], references: [id])
  planDiscountId   Int?
  require_crawler  Boolean          @default(false)

  // Operator fields
  operators User[] @relation(name: "OperatorUserPlan")
}

model ChatUser {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String?
  user_plan     UserPlan      @relation(fields: [user_plan_id], references: [id])
  user_plan_id  Int           @map("userPlanId")
  created_at    DateTime      @default(now())
  chat_messages ChatMessage[]
}

model ChatMessage {
  id              Int             @id @default(autoincrement())
  type            ChatMessageType @default(TEXT)
  content         String
  is_user_message Boolean         @default(true)
  operator        User?           @relation(fields: [operator_id], references: [id])
  operator_id     Int?
  chat_user       ChatUser?       @relation(fields: [chat_user_id], references: [id])
  chat_user_id    Int             @map("chatUserId")
  action_req      Action?
  created_at      DateTime        @default(now())
}

model Product {
  id           Int        @id @default(autoincrement())
  url          String
  title        String
  description  String
  image        String
  price        Int
  status       Boolean    @default(true)
  attributes   Json
  user_plan    UserPlan   @relation(fields: [user_plan_id], references: [id])
  user_plan_id Int        @map("userPlanId")
  weight       Float      @default(0)
  categories   Category[]
}

model Category {
  id           Int       @id @default(autoincrement())
  title        String
  products     Product[]
  user_plan    UserPlan  @relation(fields: [user_plan_id], references: [id])
  user_plan_id Int       @map("userPlanId")
}

model Invoice {
  id      Int           @id @default(autoincrement())
  user    User          @relation(fields: [userId], references: [id])
  userId  Int
  plan    Plan          @relation(fields: [planId], references: [id])
  planId  Int
  trackId String?
  status  InvoiceStatus @default(PENDING)
}
