// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ChatMessageType {
  TEXT
}

enum Action {
  AdminRequired
  ProductRequest
}

enum Role {
  CHAT_OPERATOR
  USER
  ADMIN
}

enum InvoiceStatus {
  VERIFIED
  CANCELLED
  PENDING
}

model User {
  id                    Int             @id @default(autoincrement())
  email                 String          @unique
  password              String
  name                  String?
  token                 String?
  mobile                String?
  address               String?
  code_meli             String?
  role                  Role            @default(USER)
  user_plans            UserPlan[]
  Invoice               Invoice[]
  PlanDiscount          PlanDiscount[]
  birth                 String?
  verify_code           Int?
  // Operator fields
  is_reseting           Boolean         @default(false)
  operator_user_plan    UserPlan?       @relation(name: "OperatorUserPlan", fields: [operator_user_plan_id], references: [id])
  operator_user_plan_id Int?
  chatMessages          ChatMessage[]
  Ticket                Ticket[]
  TicketMessage         TicketMessage[]
}

model Plan {
  id              Int        @id @default(autoincrement())
  title           String
  price           Int
  days            Int
  chat_count      Int        @default(100)
  file_size_limit Int        @default(5)
  operator_count  Int        @default(2)
  user_plans      UserPlan[]
  invoices        Invoice[]
}

model PlanDiscount {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  discount  Int
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  userPlans UserPlan[]
}

model UserPlan {
  id               Int           @id @default(autoincrement())
  plan             Plan          @relation(fields: [plan_id], references: [id])
  user             User          @relation(fields: [user_id], references: [id])
  plan_id          Int           @map("planId")
  user_id          Int           @map("userId")
  chat_users       ChatUser[]
  created_at       DateTime      @default(now())
  products         Product[]
  categories       Category[]
  api_key          String        @unique
  business_title   String?
  business_caption String?
  PlanDiscount     PlanDiscount? @relation(fields: [planDiscountId], references: [id])
  planDiscountId   Int?
  require_crawler  Boolean       @default(false)
  chats_used       Int           @default(0)

  // Operator fields
  operators      User[]          @relation(name: "OperatorUserPlan")
  Ticket         Ticket[]
  WidgetSettings WidgetSettings?
}

model ChatUser {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String?
  user_plan     UserPlan      @relation(fields: [user_plan_id], references: [id])
  user_plan_id  Int           @map("userPlanId")
  created_at    DateTime      @default(now())
  chat_messages ChatMessage[]
  sid           String?
}

model ChatMessage {
  id              Int             @id @default(autoincrement())
  type            ChatMessageType @default(TEXT)
  content         String
  is_user_message Boolean         @default(true)
  operator        User?           @relation(fields: [operator_id], references: [id])
  operator_id     Int?
  chat_user       ChatUser?       @relation(fields: [chat_user_id], references: [id])
  chat_user_id    Int?            @map("chatUserId")
  action_req      Action?
  read            Boolean         @default(false)
  created_at      DateTime        @default(now())
}

model Category {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  products     Product[]
  user_plan    UserPlan  @relation(fields: [user_plan_id], references: [id])
  user_plan_id Int
}
model Product {
  id           Int       @id @default(autoincrement())
  url          String    @unique
  title        String
  description  Json
  image        String
  price        Int
  status       Boolean   @default(true)
  attributes   Json
  brand        String
  user_plan    UserPlan  @relation(fields: [user_plan_id], references: [id])
  user_plan_id Int
  weight       Float     @default(0)
  category     Category? @relation(fields: [category_id], references: [id])
  category_id   Int?
}


model Invoice {
  id      Int           @id @default(autoincrement())
  user    User          @relation(fields: [userId], references: [id])
  userId  Int
  plan    Plan          @relation(fields: [planId], references: [id])
  planId  Int
  trackId String?
  status  InvoiceStatus @default(PENDING)
}

model Ticket {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [user_id], references: [id])
  user_id         Int             @map("userId")
  user_plan       UserPlan        @relation(fields: [user_plan_id], references: [id])
  user_plan_id    Int             @map("userPlanId")
  ticket_messages TicketMessage[]
  is_open         Boolean
}

model TicketMessage {
  id        Int     @id @default(autoincrement())
  subject   String
  content   String
  owner     User    @relation(fields: [owner_id], references: [id])
  owner_id  Int     @map("userId")
  Ticket    Ticket? @relation(fields: [ticket_id], references: [id])
  ticket_id Int?    @map("ticketId")
}

model WidgetSettings {
  id           Int      @id @default(autoincrement())
  color        String   @default("#000")
  title        String   @default("Business title")
  caption      String   @default("Business caption")
  description  String   @default("Business description")
  welcome      String   @default("Business welcome message")
  pos          Int      @default(0)
  icon         String
  user_plan    UserPlan @relation(fields: [user_plan_id], references: [id])
  user_plan_id Int      @unique
}
